# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Full CI workflow
# Run before merging. Rebases on master to make sure CI passes for latest integration, not only for the PR at the time of creation.

name: Full CI

on:
  push:
    branches:
      - staging
      - trying

env:
  GDEXT_FEATURES: ''
#  GDEXT_FEATURES: '--features crate/feature'
#  GDEXT_CRATE_ARGS: '-p godot-codegen -p godot-ffi -p godot-core -p godot-macros -p godot'

  # LSan options: https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer
  # * report_objects: list individual leaked objects when running LeakSanitizer
  LSAN_OPTIONS: report_objects=1

  # ASan options: https://github.com/google/sanitizers/wiki/AddressSanitizerFlags

defaults:
  run:
    shell: bash

# If a new commit is pushed before the old one's CI has completed (on the same branch), abort previous run
#concurrency:
#  group: ${{ github.head_ref }}
#  cancel-in-progress: true

jobs:
  rustfmt:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: "Install Rust"
        uses: ./.github/composite/rust
        with:
          rust: stable
          components: rustfmt

      - name: "Check rustfmt"
        run: cargo fmt --all -- --check


  clippy:
    name: clippy (${{ matrix.name }})
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include: 
          - name: linux
            rust-toolchain: stable
            godot-binary: godot.linuxbsd.editor.dev.x86_64
          
          - name: linux-double
            rust-toolchain: stable
            godot-binary: godot.linuxbsd.editor.dev.double.x86_64
            rust-extra-args: --features double-precision
    steps:
      - uses: actions/checkout@v3

      - name: "Install Rust"
        uses: ./.github/composite/rust

      # TODO get rid of Godot binary, once the JSON is either versioned or fetched from somewhere
      # Replaces also backspaces on Windows, since they cause problems in Bash
      - name: "Install Godot"
        uses: ./.github/composite/godot-install
        with:
          artifact-name: godot-${{ matrix.name }}
          godot-binary: ${{ matrix.godot-binary }}

      - name: "Check clippy"
        run: |
          cargo clippy --all-targets $GDEXT_FEATURES ${{ matrix.rust-extra-args }} -- \
          -D clippy::suspicious -D clippy::style -D clippy::complexity -D clippy::perf \
          -D clippy::dbg_macro -D clippy::todo -D clippy::unimplemented -D warnings 


  unit-test:
    name: unit-test (${{ matrix.name }}${{ matrix.rust-special }})
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    strategy:
      fail-fast: false # cancel all jobs as soon as one fails?
      matrix:
        # Order this way because macOS typically has the longest duration, followed by Windows, so it benefits total workflow execution time.
        # Additionally, the 'linux (msrv *)' special case will then be listed next to the other 'linux' jobs.
        # Note: Windows uses '--target x86_64-pc-windows-msvc' by default as Cargo argument.
        include:
          - name: macos
            os: macos-11
            rust-toolchain: stable
            godot-binary: godot.macos.editor.dev.x86_64
            with-llvm: true

          - name: windows
            os: windows-latest
            rust-toolchain: stable-x86_64-pc-windows-msvc
            godot-binary: godot.windows.editor.dev.x86_64.exe

          # Don't use latest Ubuntu (22.04) as it breaks lots of ecosystem compatibility.
          # If ever moving to ubuntu-latest, need to manually install libtinfo5 for LLVM.
          - name: linux
            os: ubuntu-20.04
            rust-toolchain: stable
            godot-binary: godot.linuxbsd.editor.dev.x86_64

          - name: linux
            os: ubuntu-20.04
            rust-toolchain: stable
            rust-special: -minimal-deps
            godot-binary: godot.linuxbsd.editor.dev.x86_64
          
    steps:
      - uses: actions/checkout@v3

      - name: "Install Rust"
        uses: ./.github/composite/rust
        with:
          rust: stable
          cache-key: ${{ matrix.rust-special }} # '-minimal-deps' or empty/not defined
          with-llvm: ${{ matrix.with-llvm }}

      - name: "Install Rust nightly (minimal deps)"
        uses: ./.github/composite/rust
        with:
          rust: nightly
          cache-key: minimal-deps-nightly
        if: ${{ matrix.rust-special == '-minimal-deps' }}

      - name: "Install minimal dependency versions from Cargo"
        run: cargo +nightly update -Z minimal-versions
        if: ${{ matrix.rust-special == '-minimal-deps' }}

      # TODO get rid of Godot binary, once the JSON is either versioned or fetched from somewhere
      # Replaces also backspaces on Windows, since they cause problems in Bash
      - name: "Install Godot"
        uses: ./.github/composite/godot-install
        with:
          artifact-name: godot-${{ matrix.name }}
          godot-binary: ${{ matrix.godot-binary }}

      - name: "Compile tests"
        run: cargo test $GDEXT_FEATURES --no-run ${{ matrix.rust-extra-args }}

      - name: "Test"
        run: cargo test $GDEXT_FEATURES ${{ matrix.rust-extra-args }}


  godot-itest:
    name: godot-itest (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    timeout-minutes: 24
    strategy:
      fail-fast: false # cancel all jobs as soon as one fails?
      matrix:
        # Order this way because macOS typically has the longest duration, followed by Windows, so it benefits total workflow execution time.
        # Additionally, the 'linux (msrv *)' special case will then be listed next to the other 'linux' jobs.
        # Note: Windows uses '--target x86_64-pc-windows-msvc' by default as Cargo argument.
        include:
          - name: macos
            os: macos-12
            rust-toolchain: stable
            godot-binary: godot.macos.editor.dev.x86_64
            with-llvm: true
          
          - name: macos-double
            os: macos-12
            rust-toolchain: stable
            godot-binary: godot.macos.editor.dev.double.x86_64
            rust-extra-args: --features double-precision
            with-llvm: true

          - name: windows
            os: windows-latest
            rust-toolchain: stable-x86_64-pc-windows-msvc
            godot-binary: godot.windows.editor.dev.x86_64.exe

          - name: windows-double
            os: windows-latest
            rust-toolchain: stable-x86_64-pc-windows-msvc
            godot-binary: godot.windows.editor.dev.double.x86_64.exe
            rust-extra-args: --features double-precision

          # Don't use latest Ubuntu (22.04) as it breaks lots of ecosystem compatibility.
          # If ever moving to ubuntu-latest, need to manually install libtinfo5 for LLVM.
          - name: linux
            os: ubuntu-20.04
            rust-toolchain: stable
            godot-binary: godot.linuxbsd.editor.dev.x86_64

          - name: linux-double
            os: ubuntu-20.04
            rust-toolchain: stable
            godot-binary: godot.linuxbsd.editor.dev.dou